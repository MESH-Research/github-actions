{"version":3,"file":"action-BvPzO5Zr.js","sources":["../../src/action.ts"],"sourcesContent":["/// <reference types=\"vite/client\" />\nimport { debug, setFailed } from \"@actions/core\";\nimport type { ActionCommand, ActionStage, ActionInputs } from \"types.ts\";\n\nconst getCommandFile = (command: string): string => `../commands/${command}.ts`;\n\nconst commands = import.meta.glob(\"../commands/*.ts\", {\n    import: \"runCommand\",\n});\n\nexport async function run(\n    stage: ActionStage,\n    inputs: ActionInputs,\n): Promise<void> {\n    try {\n        const { command } = inputs;\n        const commandFile = getCommandFile(command);\n\n        if (!(commandFile in commands)) {\n            throw new Error(`Command \"${command}\" not found.`);\n        }\n        debug(`Running ${command} in stage: ${stage}`);\n        commands[commandFile]().then((mod: unknown) => {\n            return (mod as ActionCommand)(stage, inputs);\n        });\n    } catch (error) {\n        if (error instanceof Error) {\n            setFailed(error.message);\n        }\n    }\n}\n"],"names":["getCommandFile","command","commands","run","stage","inputs","commandFile","debug","mod","error","setFailed"],"mappings":"qDAIA,MAAMA,EAAkBC,GAA4B,eAAeA,CAAO,MAEpEC,EAAW,OAAA,OAAA,CAAA,CAAA,EAIjB,eAAsBC,EAClBC,EACAC,EACa,CACb,GAAI,CACA,KAAM,CAAE,QAAAJ,GAAYI,EACdC,EAAcN,EAAeC,CAAO,EAE1C,GAAI,EAAEK,KAAeJ,GACjB,MAAM,IAAI,MAAM,YAAYD,CAAO,cAAc,EAErDM,EAAM,WAAWN,CAAO,cAAcG,CAAK,EAAE,EAC7CF,EAASI,CAAW,EAAA,EAAI,KAAME,GAClBA,EAAsBJ,EAAOC,CAAM,CAC9C,CAAA,OACII,EAAO,CACRA,aAAiB,OACjBC,EAAUD,EAAM,OAAO,CAC3B,CAER"}